{"version":3,"sources":["Panoramas/panorama1.png","Panoramas/panorama2.png","Images/bennet.jpg","Images/cuban.jpg","Components/Pennellum/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","console","log","Pennellum","props","width","height","image","pitch","yaw","hfov","autoLoad","onLoad","App","panoramas","name","path","panorama1","thumb","bennet","panarama2","cuban","useState","show","setShow","selectedPanorama","setSelectedPanorama","className","id","map","item","index","key","src","alt","Button","value","variant","onClick","e","handleShow","target","Modal","onHide","size","aria-labelledby","centered","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mNCK3CC,QAAQC,MACR,IA0CiBC,EA1CC,SAACC,GAAD,OAChB,6BACI,kBAAC,IAAD,CACIC,MAAM,OACNC,OAAO,QACPC,MAAOH,EAAMG,MACbC,MAAO,GACPC,IAAK,IACLC,KAAM,IACNC,UAAQ,EACRC,OAAQ,WACJX,QAAQC,IAAI,wB,oFCuFXW,MA5Ff,WAGE,IAAIC,EAAY,CACd,CACEC,KAAM,oBACNC,KAAMC,IACNC,MAAOC,KAGT,CACEJ,KAAM,QACNC,KAAMI,IACNF,MAAOG,MAbE,EAmBWC,oBAAS,GAnBpB,mBAmBNC,EAnBM,KAmBAC,EAnBA,OAoBiCF,mBAAS,IApB1C,mBAoBRG,EApBQ,KAoBUC,EApBV,KAgCb,OACE,yBAAKC,UAAU,OAEjB,6BAASC,GAAG,OAAOD,UAAU,QAC3B,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,eACA,yBAAKA,UAAU,OACdb,EAAUe,KAAI,SAAEC,EAAMC,GAAR,OACP,yBAAKJ,UAAU,8BAA8BK,IAAKD,GAChD,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eACX,2BACE,yBAAKA,UAAU,aAAaM,IAAKH,EAAKZ,MAAOgB,IAAI,kBAEnD,wBAAIP,UAAU,cAAd,IAA6BG,EAAKf,KAAlC,KAEA,kBAACoB,EAAA,EAAD,CAAQC,MAAON,EAAKd,KAAMqB,QAAQ,UAAUC,QAAS,SAAAC,GAAC,OAzBnE,SAACT,GAClBJ,EAAoBI,GACpBN,GAAQ,GAuBgFgB,CAAWD,EAAEE,OAAOL,SAA9E,QAGA,wBAAIT,UAAU,UACd,uCAY1B,kBAACe,EAAA,EAAD,CAAOnB,KAAMA,EAAMoB,OA7CL,WAClBnB,GAAQ,IA4CqCoB,KAAK,KAC1CC,kBAAgB,gCAChBC,UAAQ,GAIR,kBAACJ,EAAA,EAAMK,KAAP,CAAYpB,UAAY,eAClB,kBAAC,EAAD,CAAWpB,MAASkB,UC1ElBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.c3265513.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/panorama1.e1b9e746.png\";","module.exports = __webpack_public_path__ + \"static/media/panorama2.0a0d5422.png\";","module.exports = __webpack_public_path__ + \"static/media/bennet.dc7be377.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cuban.ad8991de.jpg\";","import React from 'react';\r\n// import { render } from 'react-dom';\r\nimport { Pannellum } from \"pannellum-react\";\r\n\r\n\r\nconsole.log();\r\nconst Pennellum = (props) => (\r\n  <div>\r\n      <Pannellum\r\n          width=\"100%\"\r\n          height=\"500px\"\r\n          image={props.image}\r\n          pitch={10}\r\n          yaw={180}\r\n          hfov={110}\r\n          autoLoad\r\n          onLoad={() => {\r\n              console.log(\"panorama loaded\");\r\n          }}\r\n      >\r\n\r\n        {/* Hotspots */}\r\n\r\n        {/* \r\n              <Pannellum.Hotspot\r\n              type=\"info\"\r\n              pitch={11}\r\n              yaw={-167}\r\n              text=\"Info Hotspot Text 3\"\r\n              URL=\"https://github.com/farminf/pannellum-react\"\r\n            />\r\n         */}\r\n\r\n        {/* \r\n        <Pannellum.Hotspot\r\n          type=\"info\"\r\n          pitch={31}\r\n          yaw={-107}\r\n          text=\"Info Hotspot Text 4\"\r\n          URL=\"https://github.com/farminf/pannellum-react\"\r\n        /> */}\r\n\r\n      </Pannellum>\r\n    </div>\r\n);\r\n \r\n// export default PannellumReact;\r\n\r\n  export default Pennellum;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Pennellum from './Components/Pennellum'\nimport { Button, Modal} from 'react-bootstrap';\n\nimport panorama1 from './Panoramas/panorama1.png'\nimport panarama2 from './Panoramas/panorama2.png'\n\nimport bennet from './Images/bennet.jpg'\nimport cuban from './Images/cuban.jpg'\n\nfunction App() {\n\n  \n  let panoramas = [\n    {\n      name: 'Moment of Silence',\n      path: panorama1,\n      thumb: bennet\n    },\n\n    {\n      name: 'Cuban',\n      path: panarama2,\n      thumb: cuban\n    }\n     \n  \n  ];\n\n  const [show, setShow] = useState(false);\n  let [selectedPanorama, setSelectedPanorama] = useState('');\n\n  const handleClose = () => { \n    setShow(false);\n   }\n\n  const handleShow = (item) => {\n    setSelectedPanorama(item);\n    setShow(true);\n  }\n\n\n  return (\n    <div className=\"App\">\n\n  <section id=\"team\" className=\"pb-5\">\n    <div className=\"container\">\n      <h1 className=\"text-center\">Exhibitions</h1>\n      <div className=\"row\">\n      {panoramas.map(( item, index) => (\n              <div className=\"col-xs-12 col-sm-6 col-md-4\" key={index}>\n                <div className=\"image-flip\" >\n                  <div className=\"mainflip flip-0\">\n                      <div className=\"frontside\">\n                          <div className=\"card\">\n                              <div className=\"text-center\">\n                                  <p>\n                                    <img className=\" img-fluid\" src={item.thumb} alt=\"galleryb img\"/>\n                                  </p>\n                                  <h4 className=\"card-title\"> {item.name} </h4>\n                                  {/* <button className=\"btn btn-info\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onclick=\"loadBennet()\"> View <i className=\"fa fa-eye\"></i> </button> */}\n                                  <Button value={item.path} variant=\"primary\" onClick={e => handleShow(e.target.value)}>\n                                      View\n                                  </Button>\n                                  <hr className=\"trans\"/>\n                                  <br />\n                                </div>\n                          </div>\n                      </div>\n                    </div>\n                </div>\n              </div>              \n      ))}\n      </div>\n\n     \n\n        <Modal show={show} onHide={handleClose}  size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            {/* <Modal.Header closeButton>\n              <Modal.Title>Modal heading</Modal.Title>\n            </Modal.Header> */}\n            <Modal.Body className = \"zero-margin\">\n                  <Pennellum image = {selectedPanorama}/>\n            </Modal.Body>\n            {/* <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClose}>\n                Close\n              </Button>\n              <Button variant=\"primary\" onClick={handleClose}>\n                Save Changes\n              </Button>\n            </Modal.Footer> */}\n        </Modal>\n\n    </div>\n    </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}